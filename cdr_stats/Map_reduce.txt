

List Map Reduce used in CDR-Stats
=================================

1. MAP REDUCE : ANALYTIC
------------------------


// Get from daily Report from date A to date B
================================================

map = function(){
    var year = this.metadata.date.getFullYear();
    var month = this.metadata.date.getMonth();
    var day = this.metadata.date.getDate();
    var d = new Date(year, month, day);
    emit( {
        g_Millisec: d.getTime(),
    },
    {
        call__count: this.call_daily,
        duration__sum: this.duration_daily,
    } )
};

reduce = function(key,vals) {
    var ret = {
        call__count : 0,
        duration__sum: 0,
    };
    for (var i=0; i < vals.length; i++){
        ret.call__count += vals[i].call__count;
        ret.duration__sum += vals[i].duration__sum;
    }
    return ret;
};

query = {'metadata.accountcode': '1000' };

db.foo.drop();
db.runCommand( { mapreduce:"daily_analytic", map:map, reduce:reduce, out: { reduce: "foo" }, query: query});

db.foo.find();

**********************************
Test Aggregate

db.daily_analytic.group(
           {key: { 'metadata.accountcode': true },
            cond: { 'metadata.accountcode': '1000'},
            reduce: function(obj,prev){ prev.count++;},
            initial: { count: 0 }
            });

db.cdr_common.group(
           {key: { 'hangup_cause_id': true },
            cond: { },
            reduce: function(obj,prev){ prev.count++;},
            initial: { count: 0 }
            });

******************
Try move map reduce





map = function(){
            emit( {
                        a_Year: this.metadata.date.getFullYear(),
                        b_Month: this.metadata.date.getMonth() + 1,
                        c_Day: this.metadata.date.getDate(),
                    },
                    {
                        calldate__count: this.call_daily,
                        duration__sum: this.duration_daily,
                        duration__avg: 0
                    } )
        };

reduce = function(key,vals) {
            var ret = {
                            calldate__count : 0,
                            duration__sum: 0,
                            duration__avg: 0
                       };

            for (var i=0; i < vals.length; i++){
                ret.calldate__count += parseInt(vals[i].calldate__count);
                ret.duration__sum += parseInt(vals[i].duration__sum);
            }
            return ret;
        };

finalizef = function(key, value) {
                    if (parseInt(value.calldate__count) > 0)
                        value.duration__avg = parseFloat( parseFloat(value.duration__sum) / parseInt(value.calldate__count) );
                    return value;
        };

query = {'metadata.accountcode': '1000' };

db.aggregate_result_cdr_view.drop();
db.runCommand( { mapreduce:"daily_analytic", map:map, reduce:reduce, out: { reduce: 'aggregate_result_cdr_view' }, query: query, finalize:finalizef});

db.aggregate_result_cdr_view.find();

*******************
db.daily_analytic.group(
           {key: { '_id': true },
            cond: { },
            reduce: function(obj,prev){ prev.count += obj.call_daily;},
            initial: { count: 0 }
            });

# Aggregate Call per Day
db.daily_analytic.aggregate(
        { $group : {
          _id: {$substr :["$_id",0,8]},
          callperday: { $sum : "$call_daily" }
        }});


// Get from hourly Report from one day, use query to apply this to one day only
================================================================================


map = function(){
    var year = this.metadata.date.getFullYear();
    var month = this.metadata.date.getMonth();
    var day = this.metadata.date.getDate();
    var d = new Date(year, month, day);
    emit(
        { g_Millisec: d.getTime(), },
        {
            call__count: this.call_hourly,
            duration__sum: this.duration_hourly,
        }
    )
};

reduce = function(key, vals) {
    var ret = {
        call__count : [],
        duration__sum: [],
    };
    for(var k=0; k < 24; k++){
        ret.call__count[k]=0;
        ret.duration__sum[k]=0;
    }
    for (var i=0; i < vals.length; i++) {
        for (var k=0; k < 24; k++) {
            if (vals[i].call__count[k]) {
                ret.call__count[k] += vals[i].call__count[k];
                ret.duration__sum[k] += vals[i].duration__sum[k];
            }
        }
    }
    return ret;
};

query = {};

db.foo.drop();
db.runCommand( { mapreduce:"daily_analytic", map:map, reduce:reduce, out: { reduce: "foo" }, query: query});

db.foo.find();

**************************************** Minutes report *************************************************

map = function(){
    var year = this.metadata.date.getFullYear();
    var month = this.metadata.date.getMonth();
    var day = this.metadata.date.getDate();
    var hour = this.metadata.date.getHours();
    var min = this.metadata.date.getMinutes();
    var d = new Date(year, month, day, hour, min);
    emit(
        { g_Millisec: d.getTime(), },
        {
            call__count: this.call_minute,
            duration__sum: this.duration_minute,
        }
    )
};


// '2012-06-01 00:02' - 10 - 22 |  '2012-06-01 01:23' - 2 - 10
reduce = function(key, vals) {
    var result = new Object();

    for(var k=0; k < 24; k++){
        for(var l=0; l < 60; l++){
            if (k < 10) {
                rkey = '0' + k + ':';
            } else {
                rkey = k + ':';
            }
            if (l < 10) {
                rkey = rkey + '0' + l;
            } else {
                rkey = rkey + l;
            }
            result['c/'+rkey] = 0;
            result['d/'+rkey] = 0;

        }
    }
    for (var i=0; i < vals.length; i++) {
        for (var k=0; k < 24; k++) {
            for(var l=0; l < 60; l++){
                if (k < 10) {
                    rkey = '0' + k + ':';
                } else {
                    rkey = k + ':';
                }
                if (l < 10) {
                    rkey = rkey + '0' + l;
                } else {
                    rkey = rkey + l;
                }

                if (vals[i].call__count[k] && vals[i].call__count[k][l]) {
                    result['c/'+rkey] += parseInt(vals[i].call__count[k][l]);
                    if (vals[i].duration__sum[k] && vals[i].duration__sum[k][l]) {
                        result['d/'+rkey] += parseInt(vals[i].duration__sum[k][l]);
                    }
                }
            }
        }
    }
    return result;
};

query = {'metadata.accountcode': '1000' };
query = {'metadata.accountcode': '1000', 'metadata.date': {$gte: ISODate("2012-05-31T00:00:00Z"), $lte: ISODate("2012-06-31T23:59:59Z")} };

db.foo.drop();
db.runCommand( { mapreduce:"daily_analytic", map:map, reduce:reduce, out: { reduce: "foo" }, query: query});

db.foo.find();


###############################################
db.daily_analytic.count({'metadata.accountcode': '1000', 'metadata.date': {$gte: ISODate("2012-05-31T00:00:00Z"), $lte: ISODate("2012-06-31T23:59:59Z")} })

db.daily_analytic.find({'metadata.accountcode': '1000', 'metadata.date': {$gte: ISODate("2012-05-31T00:00:00Z"), $lte: ISODate("2012-06-31T23:59:59Z")} }, { 'call_daily' : 1});


**************************************** Minutes report for country*************************************************
map = function(){

    emit(
        {
            a_Year: this.metadata.date.getFullYear(),
            b_Month: this.metadata.date.getMonth() + 1,
            c_Day: this.metadata.date.getDate(),
            f_Switch: this.metadata.switch_id,
            country_id: this.metadata.country_id,
        },
        {
            call__count: this.call_minute,
            duration__sum: this.duration_minute,
        }
    )
};

// '2012-06-01 00:02' - 10 - 22 |  '2012-06-01 01:23' - 2 - 10
reduce = function(key, vals) {
    var result = new Object();

    for(var k=0; k < 24; k++){
        for(var l=0; l < 60; l++){
            if (k < 10) {
                rkey = '0' + k + ':';
            } else {
                rkey = k + ':';
            }
            if (l < 10) {
                rkey = rkey + '0' + l;
            } else {
                rkey = rkey + l;
            }
            result['c/'+rkey] = 0;
            result['d/'+rkey] = 0;

        }
    }
    for (var i=0; i < vals.length; i++) {
        for (var k=0; k < 24; k++) {
            for(var l=0; l < 60; l++){
                if (k < 10) {
                    rkey = '0' + k + ':';
                } else {
                    rkey = k + ':';
                }
                if (l < 10) {
                    rkey = rkey + '0' + l;
                } else {
                    rkey = rkey + l;
                }

                if (vals[i].call__count[k] && vals[i].call__count[k][l]) {
                    result['c/'+rkey] += parseInt(vals[i].call__count[k][l]);
                    if (vals[i].duration__sum[k] && vals[i].duration__sum[k][l]) {
                        result['d/'+rkey] += parseInt(vals[i].duration__sum[k][l]);
                    }
                }
            }
        }
    }
    return result;
};

query = {'metadata.accountcode': '1000' };
query = {'metadata.accountcode': '1000', 'metadata.date': {$gte: ISODate("2012-06-01T00:00:00Z"), $lte: ISODate("2012-06-05T23:59:59Z")} };

db.foo.drop();
db.runCommand( { mapreduce:"daily_analytic", map:map, reduce:reduce, out: { reduce: "foo" }, query: query});

db.foo.find();


###############################################

*************** TEst *******

// Get from daily Report from date A to date B

function map() {
    var year = this.metadata.date.getFullYear();
    var month = this.metadata.date.getMonth();
    var day = this.metadata.date.getDate();
    var d = new Date(year, month, day);
    emit( {
        g_Millisec: d.getTime(),
    },
    {
        call__count: this.call_daily,
        duration__sum: this.duration_daily,
    } )
}

function emit(k, v) {
    print("emit");
    print("  k:" + k + " v:" + tojson(v));
}

x = db.daily_analytic.findOne();
map.apply(x);










1. MAP REDUCE : ACCOUNT / DURATION
----------------------------------

This is just a simple example, it's not used in the code.

MapReduce::

    map = function() {
        emit( this.accountcode, {count: 1, duration: this.duration} );
    }

    reduce = function(key, values) {
        var result = {count: 0, duration: 0};

        values.forEach(function(value) {
              result.count += value.count;
              result.duration += value.duration;
        });

        return result;
    }

    db.cdr_common.mapReduce(map, reduce, out="foo");




2. MAP REDUCE : Date aggregate, Duration SUM, Duration AVG
----------------------------------------------------------

This MapReduce is used on the CDR view to display the amount of calls per day

MapReduce::

    map = function(){
       emit( {
            a_Year: this.start_uepoch.getFullYear(),
            b_Month: this.start_uepoch.getMonth() + 1,
            c_Day: this.start_uepoch.getDate(),
       },
       {
            calldate__count: 1,
            calldate: this.start_uepoch,
            duration__sum: this.duration,
            duration__avg: 0
        } )
    }

    reduce = function(key,vals) {
         var ret = {
                calldate__count : 0,
                duration__sum: 0,
                duration__avg: 0
           };

         for (var i=0; i < vals.length; i++){
            ret.calldate__count += parseInt(vals[i].calldate__count);
            ret.duration__sum += parseInt(vals[i].duration__sum);
         }
         return ret;
    }

    db.cdr_common.mapReduce(map, reduce, out="foo");




3. MAP REDUCE : Date aggregate, Duration SUM, Duration AVG
----------------------------------------------------------

    map = mark_safe(u'''
          function(){
             emit( {a_Year: this.start_uepoch.getFullYear(),
                    b_Month: this.start_uepoch.getMonth() + 1,
                    c_Day: this.start_uepoch.getDate(),
                    d_Hour: this.start_uepoch.getHours(),
                    e_Min: this.start_uepoch.getMinutes(),
                   },
                   {calldate__count: 1, duration__sum: this.duration, hangup_cause_id: this.hangup_cause_id} )
          }''')
    reduce = mark_safe(u'''
             function(key,vals) {
                 var ret = {
                                calldate__count : 0,
                                duration__sum: 0,
                                hangup_cause_id: 0,
                           };

                 for (var i=0; i < vals.length; i++){
                    ret.calldate__count += parseInt(vals[i].calldate__count);
                    ret.duration__sum += parseInt(vals[i].duration__sum);
                    ret.hangup_cause_id = parseInt(vals[i].hangup_cause_id);
                 }
                 return ret;
             }
             ''')

################### Map-reduce time for cdr view daily report ################
map = function(){
    emit( {
        a_Year: this.metadata.date.getFullYear(),
        b_Month: this.metadata.date.getMonth() + 1,
        c_Day: this.metadata.date.getDate(),
    },
    {
        calldate__count: this.call_daily,
        duration__sum: this.duration_daily,
        duration__avg: 0
    } );
};

reduce = function(key,vals) {
    var ret = {
                 calldate__count : 0,
                 duration__sum: 0,
                 duration__avg: 0
            };

    for (var i=0; i < vals.length; i++){
     ret.calldate__count += parseInt(vals[i].calldate__count);
     ret.duration__sum += parseInt(vals[i].duration__sum);
    }
    return ret;
};

query_var = {'start_uepoch': {'$gte': ISODate("2012-06-01T00:00:00Z"), '$lt': ISODate("2012-06-30T20:36:300:00Z"), '$lt': ISODate("2012-06-30T20:36:34Z")}};
db.foo.drop();
db.runCommand( { mapreduce:"cdr_common", map:map, reduce:reduce, out: { reduce: "foo" }, query: query_var});
{
	"result" : "foo",
	"timeMillis" : 32249,
	"counts" : {
		"input" : 43155,
		"emit" : 43155,
		"reduce" : 49,
		"output" : 6
	},
	"ok" : 1
}


4. MAP REDUCE : DASHBOARD
-------------------------

map = function(){
            var year = this.start_uepoch.getFullYear();
            var month = this.start_uepoch.getMonth();
            var day = this.start_uepoch.getDate();
            var hours = this.start_uepoch.getHours();
            var minutes = this.start_uepoch.getMinutes();
            var d = new Date(year, month, day, hours, minutes);
            emit( {
                g_Millisec: d.getTime(),
            },
            {
                calldate__count: 1,
                duration__sum: this.duration,
                hangup_cause_id: this.hangup_cause_id,
            } )
          };

reduce = function(key,vals) {
            var ret = {
                calldate__count : 0,
                duration__sum: 0,
                hangup_cause_id: 0,
            };
            for (var i=0; i < vals.length; i++){
                ret.calldate__count += parseInt(vals[i].calldate__count);
                ret.duration__sum += parseInt(vals[i].duration__sum);
                ret.hangup_cause_id = vals[i].hangup_cause_id;
            }
            return ret;
        };

query_var = {'start_uepoch': {'$gte': ISODate("2012-06-14T00:00:00Z"), '$lt': ISODate("2012-06-30T20:36:300:00Z"), '$lt': ISODate("2012-06-30T20:36:34Z")}};

db.foo.drop();
db.runCommand( { mapreduce:"cdr_common", map:map, reduce:reduce, out: { reduce: "foo" }, query: query_var});





----> now trying to use daily_analytic


map = function(){
            emit(
                {
                    a_Year: this.metadata.date.getFullYear(),
                    b_Month: this.metadata.date.getMonth() + 1,
                    c_Day: this.metadata.date.getDate(),
                },
                {
                    calldate__count: this.call_hourly,
                    duration__sum: this.duration_hourly,
                }
            )
          };

reduce = function(key,vals) {
            var ret = {
                calldate__count : [],
                duration__sum: [],
            };
            for(var k=0; k < 24; k++){
                ret.calldate__count[k]=0;
                ret.duration__sum[k]=0;
            }
            for (var i=0; i < vals.length; i++) {
                for (var k=0; k < 24; k++) {
                    if (vals[i].calldate__count[k]) {
                        ret.calldate__count[k] += vals[i].calldate__count[k];
                        ret.duration__sum[k] += vals[i].duration__sum[k];
                    }
                }
            }
            return ret;
        };

query_var = {'start_uepoch': {'$gte': ISODate("2012-06-14T00:00:00Z"), '$lt': ISODate("2012-06-14T23:36:300:00Z")}};
//query_var = {};

db.foo.drop();
db.runCommand( { mapreduce:"daily_analytic", map:map, reduce:reduce, out: { reduce: "foo" }, query: query_var});
